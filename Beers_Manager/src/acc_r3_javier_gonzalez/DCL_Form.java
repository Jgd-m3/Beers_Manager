/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package acc_r3_javier_gonzalez;

import acc_r3_javier_gonzalez.bbdd.R3Cerveza;
import java.math.BigDecimal;
import java.util.List;
import javax.swing.JOptionPane;
import org.hibernate.exception.ConstraintViolationException;

/**
 * Ventana que permite modificar y trabajar con la tabla Cervezas.
 * @author M3z
 */
public class DCL_Form extends javax.swing.JFrame {
    
    /**
     * Creates new form DCL_Form
     */
    public DCL_Form() {
        initComponents();
        initData();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnIns = new javax.swing.JButton();
        btnUpd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtGrad = new javax.swing.JTextField();
        txtPvp = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        btnPrev.setText("PREV");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnNext.setText("NEXT");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnIns.setText("Insert");
        btnIns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsActionPerformed(evt);
            }
        });

        btnUpd.setText("Update");
        btnUpd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdActionPerformed(evt);
            }
        });

        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnExit.setText("Back");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel1.setText("ID_Beer");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel2.setText("BEERS");

        jLabel3.setText("Beer's Name");

        jLabel4.setText("Graduation");

        jLabel5.setText("PVP:");

        txtID.setToolTipText("ONLY NUMBER (int)");

        txtName.setToolTipText("Name of the beer");

        txtGrad.setToolTipText("ONLY DOUBLE (xx.x)");

        txtPvp.setToolTipText("ONLY DOUBLE (xx,xx)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(btnPrev)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNext)
                .addGap(142, 142, 142))
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(btnIns)
                .addGap(81, 81, 81)
                .addComponent(btnUpd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDel)
                .addGap(61, 61, 61)
                .addComponent(btnSearch)
                .addGap(77, 77, 77))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(295, 295, 295)
                        .addComponent(btnExit))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtID)
                            .addComponent(txtName)
                            .addComponent(txtGrad)
                            .addComponent(txtPvp, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(252, 252, 252)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtGrad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPvp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrev)
                    .addComponent(btnNext))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIns)
                    .addComponent(btnUpd)
                    .addComponent(btnDel)
                    .addComponent(btnSearch))
                .addGap(33, 33, 33)
                .addComponent(btnExit)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
            this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed
    
    /**
     * Listener para pasar a la cerveza anterior. 
     */
    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        if(index == 0) rellenaDatos((index = cerves.size()-1));
        else rellenaDatos((index-=1));
    }//GEN-LAST:event_btnPrevActionPerformed
    
    /**
     * Listener para pasar a la cerveza siguiente. 
     */
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if(index < cerves.size()-1) rellenaDatos((index+=1));
        else rellenaDatos((index = 0));
    }//GEN-LAST:event_btnNextActionPerformed

    /**
     * Listener para buscar una cerveza determinada por ID, el ID se pide por ventana auxiliar.
     * @param evt 
     */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
       String leida = JOptionPane.showInputDialog(null, "Inserta numero de departamento (int) n > 0:", "BUSCAR..."
                , JOptionPane.QUESTION_MESSAGE);
       try{
           int id = Integer.parseInt(leida);
           rellenaDatos(Consultas.searchById(id));           
       }catch(NumberFormatException e){
           JOptionPane.showMessageDialog(null, "Eso no es un int: " + leida, "ERROR!", JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * Listener para insertar una nueva cerveza en la BBDD con los datos actuales de las cajas de texto.
     * @param evt 
     */
    private void btnInsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsActionPerformed
        int n = -1, id;
        BigDecimal grad, pvp;
        String nom = null;
        try{
            id = Integer.parseInt(txtID.getText());
            grad = BigDecimal.valueOf(Double.parseDouble(txtGrad.getText()));
            pvp = BigDecimal.valueOf(Double.parseDouble(txtPvp.getText()));
            nom = txtName.getText();
            if(nom == null || nom.length()<1) throw new NumberFormatException();
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Inserta bien los datos...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if((n = buscaCerve(id)) == -1){
            R3Cerveza cerve = new R3Cerveza(id, nom);
            cerve.setCgraduacion(grad);
            cerve.setCprecio(pvp);
            Modificaciones.insertaCerve(cerve);
            initData();
            rellenaDatos(cerve);
            JOptionPane.showMessageDialog(null, "Cerveza Añadida", "EXITO", JOptionPane.INFORMATION_MESSAGE);
        }
        else JOptionPane.showMessageDialog(null, "Ese ID ya esta en la BBDD", "ERROR", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnInsActionPerformed

    
    /**
     * Listener para actualizar una determinada cerveza con los datos puestos en las cajas de texto.
     * @param evt 
     */
    private void btnUpdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdActionPerformed
        // TODO add your handling code here:
        int n = -1, id;
        BigDecimal grad, pvp;
        String nom = null;
        try{
            id = Integer.parseInt(txtID.getText());
            grad = BigDecimal.valueOf(Double.parseDouble(txtGrad.getText()));
            pvp = BigDecimal.valueOf(Double.parseDouble(txtPvp.getText()));
            nom = txtName.getText();
            if(nom == null || nom.length()<1) throw new NumberFormatException();
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Inserta bien los datos...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if((n = buscaCerve(id)) != -1){
            R3Cerveza cerve = Consultas.searchById(id);
            cerve.setCnombre(nom);
            cerve.setCgraduacion(grad);
            cerve.setCprecio(pvp);
            Modificaciones.modificaCerve(cerve);
            initData();
            rellenaDatos(cerve);
            JOptionPane.showMessageDialog(null, "Cerveza Modificada", "EXITO", JOptionPane.INFORMATION_MESSAGE);
        }
        else JOptionPane.showMessageDialog(null, "Ese ID no esta en la BBDD", "ERROR", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnUpdActionPerformed

    
    /**
     * Listener para eliminar la cerveza que está mostrada en pantalla.
     * @param evt 
     */
    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        
        try{
            int id = Integer.parseInt(txtID.getText());
            if (Modificaciones.eliminar(id)) {
                JOptionPane.showMessageDialog(null, "Cerveza Eliminada", "EXITO", JOptionPane.INFORMATION_MESSAGE);
                initData();
            }
            else JOptionPane.showMessageDialog(null, "Ese ID no esta en la BBDD", "ERROR", JOptionPane.ERROR_MESSAGE);
            
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Eso no es un int: " + txtID.getText(), "ERROR!", JOptionPane.ERROR_MESSAGE);
        }catch(ConstraintViolationException e){
            JOptionPane.showMessageDialog(null, "Esa Cerveza tiene ventas, no se puede borrar: ", "ERROR!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDelActionPerformed

    /**
     *  Metodo que inicializa los datos de la Base de datos en pantalla.
     */
    private void initData(){
        cerves = Consultas.consultaCerves();
        rellenaDatos((index = 0));
    }
    
    /**
     * Metodo que rellena las cajas de la pantalla con una cerveza concreta de la tabla.
     * @param indice (int) - posicion que ocupa esa cerveza en la tabla.
     */
    private void rellenaDatos(int indice){
        if(cerves.size() > 0){
            txtID.setText(String.valueOf(cerves.get(indice).getCid()));
            txtName.setText(cerves.get(indice).getCnombre());
            txtGrad.setText(String.valueOf(cerves.get(indice).getCgraduacion()));
            txtPvp.setText(String.valueOf(cerves.get(indice).getCprecio()));
        }
    }
    /**
     * Metodo sobrecargado: 
     *  rellena las cajas de la pantalla con una cerveza concreta de la tabla.
     * @param cerv (R3Cerveza) - Objeto cerveza que se desea mostrar.
     */
    private void rellenaDatos(R3Cerveza cerv){
        if (cerv != null){
            txtID.setText(String.valueOf(cerv.getCid()));
            txtName.setText(cerv.getCnombre());
            txtGrad.setText(String.valueOf(cerv.getCgraduacion()));
            txtPvp.setText(String.valueOf(cerv.getCprecio()));
            setteaIndex(cerv.getCid());
        }
        else JOptionPane.showMessageDialog(null, "Ese ID no existe", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Metodo que busca una cerveza en la tabla y te dice su posición.
     * @param id (int) - posicion de la cerveza.
     * @return posicion que ocupa en la tabla, -1 si no está.
     */
    private int buscaCerve(int id){
        for (int i = 0; i < cerves.size(); i++) {
            if (cerves.get(i).getCid() == id) return i;
        }
        return -1;
    }
    
    /**
     * Metodo que setea el atributo que representa la el indice actual 
     * de la cerveza mostrada en pantalla.
     * @param id (int) - numero actual.
     */
    private void setteaIndex(int id){
        int n;
        if ((n = buscaCerve(id))!= -1) index = n;
    }
    
    
    private List<R3Cerveza> cerves;
    private int index;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnIns;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtGrad;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPvp;
    // End of variables declaration//GEN-END:variables
}
